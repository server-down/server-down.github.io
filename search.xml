<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker example</title>
      <link href="/2019/12/14/docker-example/"/>
      <url>/2019/12/14/docker-example/</url>
      
        <content type="html"><![CDATA[<p>This is a simple example of application running with docker, which include 2 containers:</p><ul><li>Mongo db</li><li>A java application that insert and read data from mongo</li></ul><h2 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h2><ul><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">JDK 8</a></li><li><a href="https://maven.apache.org/install.html" target="_blank" rel="noopener">Maven</a></li><li><a href="https://docs.docker.com/install/linux/docker-ce/binaries/" target="_blank" rel="noopener">Docker</a></li><li><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Docker-compose</a></li></ul><h2 id="Instruction"><a href="#Instruction" class="headerlink" title="Instruction"></a>Instruction</h2><ul><li>Clone source code</li><li>Build jar file with maven</li><li>Copy jar file to <code>/opt/docker/application</code></li><li>Start services <code>sudo docker-compose -f docker-compose-example.yml up</code></li><li>The result should be like this<pre><code>application-docker | ===== Application information =====application-docker | Name: Docker exampleapplication-docker | Description: Docker compose example, include mongodb and a java applicationapplication-docker | Created date: Thu May 17 00:00:00 UTC 2018application-docker | Last run time: Thu May 17 09:57:26 UTC 2018</code></pre></li></ul><h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><h3 id="Docker-compose-file"><a href="#Docker-compose-file" class="headerlink" title="Docker compose file"></a>Docker compose file</h3><p>This is the content of docker compose file</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token comment" spellcheck="true"># Containers</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mongodb</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mongo    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mongo<span class="token punctuation">-</span>docker    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"27017:27017"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MONGO_INITDB_ROOT_USERNAME=halab      <span class="token punctuation">-</span> MONGO_INITDB_ROOT_PASSWORD=superman    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"/opt/docker/mongo:/data/db"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> docker<span class="token punctuation">-</span>example  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> openjdk<span class="token punctuation">:</span><span class="token number">8</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> application<span class="token punctuation">-</span>docker    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mongodb    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /opt/docker/application<span class="token punctuation">:</span>/opt/application    <span class="token key atrule">command</span><span class="token punctuation">:</span> java <span class="token punctuation">-</span>jar /opt/application/docker<span class="token punctuation">-</span>example<span class="token punctuation">-</span>1.0<span class="token punctuation">-</span>SNAPSHOT.jar    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> docker<span class="token punctuation">-</span>example<span class="token key atrule">networks</span><span class="token punctuation">:</span>   docker<span class="token punctuation">-</span>example<span class="token punctuation">:</span></code></pre><h4 id="The-docker-compose-version"><a href="#The-docker-compose-version" class="headerlink" title="The docker compose version"></a>The docker compose version</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> "3</code></pre><p>The first line is <a href="https://docs.docker.com/compose/compose-file/compose-versioning/" target="_blank" rel="noopener">the version of docker compose file</a></p><h4 id="Services-and-network"><a href="#Services-and-network" class="headerlink" title="Services and network"></a>Services and network</h4><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mongodb</span><span class="token punctuation">:</span>    <span class="token punctuation">...</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> docker<span class="token punctuation">-</span>example  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token punctuation">...</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> docker<span class="token punctuation">-</span>example<span class="token key atrule">networks</span><span class="token punctuation">:</span>   docker<span class="token punctuation">-</span>example<span class="token punctuation">:</span></code></pre><p>Our system has 2 service: a mongodb and a java application, they must be in the same network to connect to each other.<br>Name the services and network as you like.</p><h5 id="Mongodb-service"><a href="#Mongodb-service" class="headerlink" title="Mongodb service"></a>Mongodb service</h5><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">mongodb</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> mongo    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mongo<span class="token punctuation">-</span>docker    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"27017:27017"</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> MONGO_INITDB_ROOT_USERNAME=halab      <span class="token punctuation">-</span> MONGO_INITDB_ROOT_PASSWORD=superman    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"/opt/docker/mongo:/data/db"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> docker<span class="token punctuation">-</span>example</code></pre><ul><li>Field <code>image</code>: use <a href="https://hub.docker.com/_/mongo/" target="_blank" rel="noopener">mongo image</a> on docker hub</li><li>Field <code>container_name</code>: set the container name</li><li>Field <code>ports</code>: Open port to connect to mongo from out side of container</li><li>Field <code>environment</code>: set initial <code>root</code> account with username <code>halab</code> and password <code>superman</code></li><li>Field <code>volumes</code>: synchronize folder <code>data/db</code> in the container with folder <code>/opt/docker/mongo</code> in the computer</li></ul><h5 id="Application-service"><a href="#Application-service" class="headerlink" title="Application service"></a>Application service</h5><pre class=" language-yaml"><code class="language-yaml">  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> openjdk<span class="token punctuation">:</span><span class="token number">8</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> application<span class="token punctuation">-</span>docker    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> mongodb    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /opt/docker/application<span class="token punctuation">:</span>/opt/application    <span class="token key atrule">command</span><span class="token punctuation">:</span> java <span class="token punctuation">-</span>jar /opt/application/docker<span class="token punctuation">-</span>example<span class="token punctuation">-</span>1.0<span class="token punctuation">-</span>SNAPSHOT.jar    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> docker<span class="token punctuation">-</span>example</code></pre><ul><li>Field <code>image</code>: use <a href="https://hub.docker.com/_/openjdk/" target="_blank" rel="noopener">open jdk image</a> on docker hub</li><li>Field <code>container_name</code>: set the container name</li><li>Field <code>depends_on</code>: this container depends on <code>mongodb</code> containers, it will start after <code>mongodb</code></li><li>Field <code>volumes</code>: synchronize folder <code>/opt/application</code> in the container with folder <code>/opt/docker/application</code> in the<br>computer. We will copy jar file to this location.</li><li>Field <code>command</code>: run this command when container start (Start java application).</li></ul><h3 id="Java-application"><a href="#Java-application" class="headerlink" title="Java application"></a>Java application</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DB_HOST <span class="token operator">=</span> <span class="token string">"mongo-docker"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DB_PORT <span class="token operator">=</span> <span class="token number">27017</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DB_USER <span class="token operator">=</span> <span class="token string">"halab"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DB_PASSWORD <span class="token operator">=</span> <span class="token string">"superman"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DB_AUTHENTICATION_DB <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> MongoClient <span class="token function">connectDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        MongoCredential credential <span class="token operator">=</span> MongoCredential<span class="token punctuation">.</span><span class="token function">createCredential</span><span class="token punctuation">(</span>DB_USER<span class="token punctuation">,</span> DB_AUTHENTICATION_DB<span class="token punctuation">,</span>                 DB_PASSWORD<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MongoClientOptions option <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MongoClientOptions<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MongoClient</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerAddress</span><span class="token punctuation">(</span>DB_HOST<span class="token punctuation">,</span> DB_PORT<span class="token punctuation">)</span><span class="token punctuation">,</span> credential<span class="token punctuation">,</span> option<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span></code></pre><p>The java application must connect mongo db with username, password set in mongodb service. The <code>DB_HOST</code> must be<br><code>mongo-docker</code> - the name of mongo db container</p>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> docker-compose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Monitoring Spring Boot application with Prometheus and Grafana</title>
      <link href="/2019/12/14/monitoring-spring-boot-application-with-prometheus-and-grafana/"/>
      <url>/2019/12/14/monitoring-spring-boot-application-with-prometheus-and-grafana/</url>
      
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/halab4dev/spring-prometheus-grafana/master/images/spring-prometheus-grafana.png" alt="spring-prometheus-grafana"></p><h2 id="Spring-boot-application"><a href="#Spring-boot-application" class="headerlink" title="Spring boot application"></a>Spring boot application</h2><h5 id="Dependencies"><a href="#Dependencies" class="headerlink" title="Dependencies"></a>Dependencies</h5><p>In <code>pom.xml</code> file, add these 2 dependencies:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.micrometer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>micrometer-registry-prometheus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><ul><li>Spring boot actuator automatically create endpoints that can provide metrics of application such as heap memory used, cpu load, GC information …</li><li>Micrometer registry prometheus will format these information in prometheus way</li></ul><h5 id="Enable-endpoints"><a href="#Enable-endpoints" class="headerlink" title="Enable endpoints"></a>Enable endpoints</h5><p>By default, Spring Boot Actuator only expose 2 endpoints: <code>/actuator/health</code>  and <code>/actuator/health</code>, so we need to enable other endpoint in configuration file:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">,</span>health<span class="token punctuation">,</span>info</code></pre><p>Now we can get metrics:</p><pre class=" language-shell"><code class="language-shell">curl 'http://localhost:8080/actuator/health'{"status":"UP"}</code></pre><pre class=" language-shell"><code class="language-shell">curl 'http://localhost:8080/actuator/prometheus'...# HELP process_uptime_seconds The uptime of the Java virtual machine# TYPE process_uptime_seconds gaugeprocess_uptime_seconds 278.817# HELP jvm_memory_max_bytes The maximum amount of memory in bytes that can be used for memory management# TYPE jvm_memory_max_bytes gaugejvm_memory_max_bytes{area="heap",id="PS Survivor Space",} 1.048576E7jvm_memory_max_bytes{area="heap",id="PS Old Gen",} 2.78396928E9jvm_memory_max_bytes{area="heap",id="PS Eden Space",} 1.370488832E9jvm_memory_max_bytes{area="nonheap",id="Metaspace",} -1.0jvm_memory_max_bytes{area="nonheap",id="Code Cache",} 2.5165824E8jvm_memory_max_bytes{area="nonheap",id="Compressed Class Space",} 1.073741824E9# HELP jvm_gc_pause_seconds Time spent in GC pause# TYPE jvm_gc_pause_seconds summaryjvm_gc_pause_seconds_count{action="end of major GC",cause="Metadata GC Threshold",} 1.0jvm_gc_pause_seconds_sum{action="end of major GC",cause="Metadata GC Threshold",} 0.093jvm_gc_pause_seconds_count{action="end of minor GC",cause="Metadata GC Threshold",} 1.0jvm_gc_pause_seconds_sum{action="end of minor GC",cause="Metadata GC Threshold",} 0.014# HELP system_load_average_1m The sum of the number of runnable entities queued to available processors and the number of runnable entities running on the available processors averaged over a period of time# TYPE system_load_average_1m gaugesystem_load_average_1m 1.34...</code></pre><h2 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h2><h5 id="Job-configuration"><a href="#Job-configuration" class="headerlink" title="Job configuration"></a>Job configuration</h5><p>In configuration file of Prometheus, define a job to get metric from Spring boot application:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">scrape_configs</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">'spring-boot-metrics'</span>    <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> <span class="token string">'/actuator/prometheus'</span>    <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 15s    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'[spring-application-host]:8080'</span><span class="token punctuation">]</span></code></pre><p>This job will call to <code>&#39;/actuator/prometheus&#39;</code> endpoint to get metrics each 15 seconds</p><h2 id="Run-all-with-docker"><a href="#Run-all-with-docker" class="headerlink" title="Run all with docker"></a>Run all with docker</h2><h5 id="Create-image-for-spring-boot-application"><a href="#Create-image-for-spring-boot-application" class="headerlink" title="Create image for spring boot application"></a>Create image for spring boot application</h5><p>Dockerfile</p><pre class=" language-dockerfile"><code class="language-dockerfile">FROM openjdk:8VOLUME /tmpADD target/spring-prometheus-grafana-0.0.1-SNAPSHOT.jar spring-prometheus-grafana-0.0.1-SNAPSHOT.jarEXPOSE 8080ENTRYPOINT ["java","-jar","spring-prometheus-grafana-0.0.1-SNAPSHOT.jar"]</code></pre><h5 id="Create-docker-compose-file"><a href="#Create-docker-compose-file" class="headerlink" title="Create docker-compose file"></a>Create docker-compose file</h5><p>Create docker compose file which include: spring application, Prometheus, Grafana<br><code>docker-compose</code> file:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># Version of docker compose. See https://docs.docker.com/compose/compose-file/compose-versioning/#versioning</span><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token comment" spellcheck="true"># Services</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>application    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> spring<span class="token punctuation">-</span>application    <span class="token key atrule">build</span><span class="token punctuation">:</span>      <span class="token key atrule">context</span><span class="token punctuation">:</span> ./      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> Dockerfile    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> monitoring<span class="token punctuation">-</span>network  <span class="token key atrule">prometheus</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> prom/prometheus    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> prometheus    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ./prometheus.yml<span class="token punctuation">:</span>/etc/prometheus/prometheus.yml    <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token string">"9090:9090"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> monitoring<span class="token punctuation">-</span>network  <span class="token key atrule">grafana</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> grafana/grafana    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> grafana    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"3000:3000"</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> monitoring<span class="token punctuation">-</span>network<span class="token key atrule">networks</span><span class="token punctuation">:</span>  monitoring<span class="token punctuation">-</span>network<span class="token punctuation">:</span></code></pre><h5 id="Build-and-run"><a href="#Build-and-run" class="headerlink" title="Build and run"></a>Build and run</h5><ul><li>Build: <code>mvn clean install</code></li><li>Build image: <code>sudo docker build . -t spring-application</code></li><li>Run: <code>sudo docker-compose up</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Monitoring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> monitoring </tag>
            
            <tag> spring boot </tag>
            
            <tag> prometheus </tag>
            
            <tag> grafana </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
